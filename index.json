[{"body":" Work in Progress. Feel free to contribute with a Pull Request!\n Features Web-based multi-tenant SLA management system using django and python 3 Mysql for general storage InfluxDB for historical time-series storage Grafana for graphing historical data Memcached for volatile cache RabbitMQ as distributed queuing system Djcelery as task runner HTML5 responsive frontend with static asset compression Per-group views Backend admin panel using Jet django-admin Asset list Assign checks to multiple assets SNMP and bash exec available (numbers, strings, booleans) Assign warning and critical thresholds to checks Assign SLAs to checks Checks, thresholds and SLAs can be configured to fail on 1 or all hosts/checks assigned for complex scenarios like redundant pumps. Email template editor in the Back-end Group-based notifications. Users can edit their own notification email in the frontend. View check info, last 30 minutes and download historicals from the front end as a user. Group-based Permission system for silencing checks, seeing info, graph and historical Metadata system Reports using django management commands Full audit log of object modifications (django-reversion). events, errors. Temporary silence checks from the front-end SNMP Traps collection (for vertiv gear) Easily identify threshold and SLA faults on the front-end with color transitions Why do I want it? With M4 System, you can address complex scenarios involving many hundreds of devices.\nManage everything from a web UI with access control and a full audit trail.\n What is it good for?: SNMP monitoring.\n What is it not good for?: Network and System Monitoring. While it is able to do such monitoring, other software will do a better job.\n What is it not yet good for?: Modbus Monitoring.\n Where should I go next? Interested ? Keep on reading.\n Getting Started: Get started with M4 System Screenshots: Check out some screenshots! ","excerpt":"Work in Progress. Feel free to contribute with a Pull Request!\n Features Web-based multi-tenant SLA …","ref":"https://m4system.ca/docs/overview/","title":"Overview"},{"body":" Work in Progress. Feel free to contribute with a Pull Request!\n Install python 3.5 apt-get install python3.5-dev libmemcached-dev wget https://bootstrap.pypa.io/get-pip.py python3.5 get-pip.py Install requirements pip3.5 install -r requirements.txt ","excerpt":" Work in Progress. Feel free to contribute with a Pull Request!\n Install python 3.5 apt-get install …","ref":"https://m4system.ca/docs/tutorials/linux/","title":"Linux Setup"},{"body":" Work in Progress. Feel free to contribute with a Pull Request!\n Tutorials are complete worked examples made up of multiple tasks that guide the user through a relatively simple but realistic scenario: building an application that uses some of your project’s features, for example. If you have already created some Examples for your project you can base Tutorials on them. This section is optional. However, remember that although you may not need this section at first, having tutorials can be useful to help your users engage with your example code, especially if there are aspects that need more explanation than you can easily provide in code comments.\n","excerpt":"Work in Progress. Feel free to contribute with a Pull Request!\n Tutorials are complete worked …","ref":"https://m4system.ca/docs/tutorials/","title":"Tutorials"},{"body":" Work in Progress. Feel free to contribute with a Pull Request!\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and GitHub Actions to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nQuick start on GitHub Here's a quick guide to updating the docs. It assumes you're familiar with the GitHub workflow and you're happy to use the automated preview of your doc updates:\n Fork the m4system.ca repo on GitHub. Make your changes and send a pull request (PR). If you're not yet ready for a review, add \u0026ldquo;WIP\u0026rdquo; to the PR name to indicate it's a work in progress. (Don't add the Hugo property \u0026ldquo;draft = true\u0026rdquo; to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Continue updating your doc and pushing your changes until you're happy with the content. When you're ready for a review, add a comment to the PR, and remove any \u0026ldquo;WIP\u0026rdquo; markers. Updating a single page If you've just spotted something you'd like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don't already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start on GitHub process above to make, preview, and propose your changes. Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n Follow the instructions in Getting started to install Hugo and any other tools you need. You'll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n Fork the m4system.ca repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/m4system/m4system.ca.git Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you're serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n Creating an issue If you've found a problem in the docs, but you're not sure how to fix it yourself, please create an issue in the m4system.ca repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources Docsy user guide: All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow. ","excerpt":"Work in Progress. Feel free to contribute with a Pull Request!\n We use Hugo to format and generate …","ref":"https://m4system.ca/docs/contribution-guidelines/","title":"Contribution Guidelines"},{"body":" Work in Progress. Feel free to contribute with a Pull Request!\n The Screenshots Frontend notifications of polling errors Tiles are red when in critical status A Threshold fails a check which fails a SLA Can also be a warning, where we notify but are not yet in trouble. Mobile Friendly More mobile friendliness Comes with a backend Backend ","excerpt":" Work in Progress. Feel free to contribute with a Pull Request!\n The Screenshots Frontend …","ref":"https://m4system.ca/docs/screenshots/","title":"Screenshots from M4System"},{"body":" Work in Progress. Feel free to contribute with a Pull Request!\n This section is where the user documentation for this project lives - all the information users need to understand and successfully use M4 System.\n","excerpt":"Work in Progress. Feel free to contribute with a Pull Request!\n This section is where the user …","ref":"https://m4system.ca/docs/","title":"Documentation"},{"body":" Work in Progress. Feel free to contribute with a Pull Request!\n Install Python Install vcc++ 2015 and build tools\n https://www.python.org/ftp/python/3.5.1/python-3.5.1-amd64.exe https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2019 More information on building python modules on windows here: https://wiki.python.org/moin/WindowsCompilers Install getttext: https://mlocati.github.io/articles/gettext-iconv-windows.html\nreboot\nInstall RabbitMQ Follow the instruction here: https://www.rabbitmq.com/install-windows.html\nrabbitmqctl add_user m4 changeme rabbitmqctl add_vhost m4 rabbitmqctl set_user_tags m4 m4 rabbitmqctl set_permissions -p m4 m4 \u0026quot;.*\u0026quot; \u0026quot;.*\u0026quot; \u0026quot;.*\u0026quot; Install lessc npm install lessc -g Setup SNMP See: https://blog.paessler.com/how-to-enable-snmp-on-your-operating-system\nAllow localhost with community \u0026ldquo;public\u0026rdquo;.\nThis will allow M4 to poll your local SNMP deamon to get some fresh data.\nSetup M4 pip3.5 install virtualenvwrapper-win git clone https://github.com/dgagnon/m4system.git mym4dev mkvirtualenv mym4dev pip3.5 install -e . manage migrate djangoplugins manage migrate manage collectstatic migrations , revisions, cache table, fixtures, collectstatic\nLoad the fixtures python3.5 manage.py loaddata fixtures/auth.json python3.5 manage.py loaddata fixtures/user.json python3.5 manage.py loaddata fixtures/djcelery.json python3.5 manage.py loaddata fixtures/scheduler.json python3.5 manage.py loaddata fixtures/webview.json Run M4 start.bat Login to M4 http://127.0.0.1:8000\nm4 / Changeme1!\n","excerpt":"Work in Progress. Feel free to contribute with a Pull Request!\n Install Python Install vcc++ 2015 …","ref":"https://m4system.ca/docs/tutorials/windows/","title":"Install on Window (Dev)"},{"body":"","excerpt":"","ref":"https://m4system.ca/index.json","title":""},{"body":"Social Media Participate in our community and get assistance from other users.\n Facebook: Like our Facebook Page to stay current! Instagram: Share your projects and tag us ! Linkedin: Join our professional network ! Sponsoring You want to contribute but do not have the time ? Here is your solution !\n Patreon: To all our Patreon, thank you from the bottom of our heart! Paypal: Send a one time donation ! Paypal Pool: Help us gather the money needed to incorporate the company ! ","excerpt":"Social Media Participate in our community and get assistance from other users.\n Facebook: Like our …","ref":"https://m4system.ca/community/","title":"Community"},{"body":" #td-cover-block-0 { background-image: url(/featured-background_hu3155ea6ccdd1405ae5b1efb49670e314_9622670_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu3155ea6ccdd1405ae5b1efb49670e314_9622670_1920x1080_fill_q75_catmullrom_top.jpg); } } Welcome to M4: An open-source monitoring system! Learn More Download Start polling ModBus, SNMP or with custom scripts in minutes!\n\n M4 provides a single web UI enabling visibility into any metrics! If it's accessible from the server running the code, you can make a metric out of it. Support Us ! We work hard to deliver this project to those who need it. You would like to pitch in, but you are not a programmer ? Become a Patreon!\n Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n Follow us on Twitter! For announcement of latest features, etc.\nRead more …\n Run it on the RaspberryPi and use M4 to automate your workflows Quickly setup a monitoring gateway using a RaspberryPi or any computer. Hop over to the documentation for the install guides. Choosing a Pi opens up many possibilities using the onboard GPIO and i2c port with relays and sensors.\n Get Support ! If you wish to open a support request, you can do so here!\n Check our status page! Wondering if there is a problem with our service ? Check our Status Page\n Help us with translations! We use Zanata to work collaboratively on translations.\nRead more …\n Completely modular, tailor M4 System to your need using our plugin system Plugins are normal python modules on your pythonpath. Add to INSTALLED_APPS after installing with pip and you are good to go. Anyone can submit plugins to be included in the core distribution. With Python, the only limit is you.\n ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://m4system.ca/","title":"M4"},{"body":" The Privacy Policy is Curently being reviewed. Please contact us to get an up to date copy. ","excerpt":" The Privacy Policy is Curently being reviewed. Please contact us to get an up to date copy. ","ref":"https://m4system.ca/privacy/","title":"Privacy Policy"},{"body":"","excerpt":"","ref":"https://m4system.ca/search/","title":"Search Results"},{"body":"ToS\n","excerpt":"ToS","ref":"https://m4system.ca/tos/","title":"Terms of Services"}]